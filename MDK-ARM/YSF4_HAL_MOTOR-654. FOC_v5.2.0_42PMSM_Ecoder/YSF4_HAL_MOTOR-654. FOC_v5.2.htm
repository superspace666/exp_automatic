<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [YSF4_HAL_MOTOR-654. FOC_v5.2.0_42PMSM_Ecoder\YSF4_HAL_MOTOR-654. FOC_v5.2.0_42PMSM_Ecoder]</title></head>
<body><HR>
<H1>Static Call Graph for image YSF4_HAL_MOTOR-654. FOC_v5.2.0_42PMSM_Ecoder\YSF4_HAL_MOTOR-654. FOC_v5.2.0_42PMSM_Ecoder</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jun 18 18:26:29 2022
<BR><P>
<H3>Maximum Stack Usage =        272 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">NMI_Handler</a><BR>
 <LI><a href="#[19]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">MemManage_Handler</a><BR>
 <LI><a href="#[1a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">BusFault_Handler</a><BR>
 <LI><a href="#[1b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">SVC_Handler</a><BR>
 <LI><a href="#[1d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">DebugMon_Handler</a><BR>
 <LI><a href="#[1e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">PendSV_Handler</a><BR>
 <LI><a href="#[34]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">CAN1_RX0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC_IRQHandler</a> from stm32f4xx_mc_it.o(i.ADC_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1a]">BusFault_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[34]">CAN1_RX0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[35]">CAN1_RX1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[36]">CAN1_SCE_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[33]">CAN1_TX_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[60]">CAN2_RX0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[61]">CAN2_RX1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[62]">CAN2_SCE_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5f]">CAN2_TX_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[6f]">CRYP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[15]">DAC_Exec</a> from dac_ui.o(i.DAC_Exec) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[11]">DAC_GetChannelConfig</a> from dac_common_ui.o(i.DAC_GetChannelConfig) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[13]">DAC_GetUserChannelValue</a> from dac_common_ui.o(i.DAC_GetUserChannelValue) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[14]">DAC_Init</a> from dac_ui.o(i.DAC_Init) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[10]">DAC_SetChannelConfig</a> from dac_common_ui.o(i.DAC_SetChannelConfig) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[12]">DAC_SetUserChannelValue</a> from dac_common_ui.o(i.DAC_SetUserChannelValue) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[6e]">DCMI_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream6_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream0_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream6_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream7_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5d]">ETH_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[5e]">ETH_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from stm32f4xx_mc_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[48]">EXTI15_10_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from stm32f4xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[50]">FMC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[71]">FPU_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[70]">HASH_RNG_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[18]">HardFault_Handler</a> from stm32f4xx_mc_it.o(i.HardFault_Handler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[42]">I2C2_ER_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[41]">I2C2_EV_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[69]">I2C3_ER_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[68]">I2C3_EV_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[76]">MCP_OnTimeOut</a> from motor_control_protocol.o(i.MCP_OnTimeOut) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[77]">MCP_ReceivedFrame</a> from motor_control_protocol.o(i.MCP_ReceivedFrame) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[78]">MCP_SentFrame</a> from motor_control_protocol.o(i.MCP_SentFrame) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[19]">MemManage_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[17]">NMI_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[63]">OTG_FS_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[6b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[6a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[6d]">OTG_HS_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[6c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[21]">PVD_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4]">R3F4XX_CurrentReadingCalibration</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_CurrentReadingCalibration) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[1]">R3F4XX_GetPhaseCurrents</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_GetPhaseCurrents) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[1]">R3F4XX_GetPhaseCurrents</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_GetPhaseCurrents) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_CurrentReadingCalibration)
 <LI><a href="#[1]">R3F4XX_GetPhaseCurrents</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_GetPhaseCurrents) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable)
 <LI><a href="#[79]">R3F4XX_HFCurrentsCalibrationAB</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_HFCurrentsCalibrationAB) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_CurrentReadingCalibration)
 <LI><a href="#[7a]">R3F4XX_HFCurrentsCalibrationC</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_HFCurrentsCalibrationC) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_CurrentReadingCalibration)
 <LI><a href="#[c]">R3F4XX_IsOverCurrentOccurred</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_IsOverCurrentOccurred) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[e]">R3F4XX_RLDetectionModeDisable</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[d]">R3F4XX_RLDetectionModeEnable</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[f]">R3F4XX_RLDetectionModeSetDuty</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeSetDuty) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[7b]">R3F4XX_RLGetPhaseCurrents</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLGetPhaseCurrents) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable)
 <LI><a href="#[7d]">R3F4XX_RLSwitchOnPWM</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLSwitchOnPWM) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable)
 <LI><a href="#[7c]">R3F4XX_RLTurnOnLowSides</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLTurnOnLowSides) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable)
 <LI><a href="#[6]">R3F4XX_SetADCSampPointSect1</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect1) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[7]">R3F4XX_SetADCSampPointSect2</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect2) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[8]">R3F4XX_SetADCSampPointSect3</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect3) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[9]">R3F4XX_SetADCSampPointSect4</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect4) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[a]">R3F4XX_SetADCSampPointSect5</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect5) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[b]">R3F4XX_SetADCSampPointSect6</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect6) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[2]">R3F4XX_SwitchOffPWM</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SwitchOffPWM) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[2]">R3F4XX_SwitchOffPWM</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SwitchOffPWM) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable)
 <LI><a href="#[2]">R3F4XX_SwitchOffPWM</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SwitchOffPWM) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable)
 <LI><a href="#[3]">R3F4XX_SwitchOnPWM</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SwitchOnPWM) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[3]">R3F4XX_SwitchOnPWM</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SwitchOnPWM) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable)
 <LI><a href="#[5]">R3F4XX_TurnOnLowSides</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_TurnOnLowSides) referenced 2 times from mc_config.o(.data)
 <LI><a href="#[5]">R3F4XX_TurnOnLowSides</a> from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_TurnOnLowSides) referenced from r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[49]">RTC_Alarm_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[23]">RTC_WKUP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[16]">Reset_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[51]">SDIO_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[53]">SPI3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1f]">SysTick_Handler</a> from stm32f4xx_mc_it.o(i.SysTick_Handler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[73]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f417xx.o(.text)
 <LI><a href="#[22]">TAMP_STAMP_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3b]">TIM1_CC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[39]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3c]">TIM2_IRQHandler</a> from stm32f4xx_mc_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3d]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[3e]">TIM4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[52]">TIM5_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[56]">TIM6_DAC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[57]">TIM7_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4b]">TIM8_BRK_TIM12_IRQHandler</a> from stm32f4xx_mc_it.o(i.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4e]">TIM8_CC_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[4c]">TIM8_UP_TIM13_IRQHandler</a> from stm32f4xx_mc_it.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[54]">UART4_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[55]">UART5_IRQHandler</a> from stm32f4xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[75]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[7e]">UFCP_AbortReceive</a> from usart_frame_communication_protocol.o(i.UFCP_AbortReceive) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[7f]">UFCP_Receive</a> from usart_frame_communication_protocol.o(i.UFCP_Receive) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[80]">UFCP_Send</a> from usart_frame_communication_protocol.o(i.UFCP_Send) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[45]">USART1_IRQHandler</a> from stm32f4xx_mc_it.o(i.USART1_IRQHandler) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[47]">USART3_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[67]">USART6_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[1b]">UsageFault_Handler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_stm32f417xx.o(.text) referenced from startup_stm32f417xx.o(RESET)
 <LI><a href="#[74]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f417xx.o(.text)
 <LI><a href="#[81]">fputc</a> from stm32f4xx_hal_msp.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[72]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[74]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(.text)
</UL>
<P><STRONG><a name="[17b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[82]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[96]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[180]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f417xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_tf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_tf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_tf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_tf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_tf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[186]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[187]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[188]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[18a]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[8c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[83]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_IRQHandler &rArr; TSK_HighFrequencyTask &rArr; MCM_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACUpdate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>Circle_Limitation</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, circle_limitation.o(i.Circle_Limitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Circle_Limitation
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[15]"></a>DAC_Exec</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dac_ui.o(i.DAC_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DAC_Exec &rArr; UI_GetReg &rArr; MCI_GetAvrgMecSpeed01Hz
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>DAC_GetChannelConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac_common_ui.o(i.DAC_GetChannelConfig))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>DAC_GetUserChannelValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dac_common_ui.o(i.DAC_GetUserChannelValue))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>DAC_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dac_ui.o(i.DAC_Init))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>DAC_SetChannelConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac_common_ui.o(i.DAC_SetChannelConfig))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>DAC_SetUserChannelValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dac_common_ui.o(i.DAC_SetUserChannelValue))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>EAC_Exec</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, enc_align_ctrl.o(i.EAC_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EAC_Exec
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetMecAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[10f]"></a>EAC_GetRestartState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_GetRestartState))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[11f]"></a>EAC_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[111]"></a>EAC_IsAligned</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_IsAligned))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[110]"></a>EAC_SetRestartState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_SetRestartState))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[9c]"></a>EAC_StartAlignment</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, enc_align_ctrl.o(i.EAC_StartAlignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EAC_StartAlignment &rArr; VSS_SetMecAcceleration
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAngle
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[137]"></a>ENC_CalcAngle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_CalcAngle))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[a1]"></a>ENC_CalcAvrgMecSpeed01Hz</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, encoder_speed_pos_fdbk.o(i.ENC_CalcAvrgMecSpeed01Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ENC_CalcAvrgMecSpeed01Hz &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[113]"></a>ENC_Clear</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[134]"></a>ENC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>ENC_Init</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, encoder_speed_pos_fdbk.o(i.ENC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ENC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9b]"></a>ENC_SetMecAngle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_SetMecAngle))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Exec
</UL>

<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_mc_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; UI_HandleStartStopButton_cb &rArr; MC_StartMotor1 &rArr; MCI_StartMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>FCP_CalcCRC</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, frame_communication_protocol.o(i.FCP_CalcCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
</UL>

<P><STRONG><a name="[140]"></a>FCP_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Init
</UL>

<P><STRONG><a name="[f5]"></a>FCP_SetClient</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_SetClient))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 510 bytes, Stack size 4 bytes, stm32f4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADCEx_InjectedConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>HAL_ADC_Init</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>HAL_Delay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_GPIO_Init</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[16e]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
</UL>

<P><STRONG><a name="[af]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[131]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_MspInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
</UL>

<P><STRONG><a name="[b6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
</UL>

<P><STRONG><a name="[b2]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[b7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[133]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_EnableCSS))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[128]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[13d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 958 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bb]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ba]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[178]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Start))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 584 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_SlaveConfigSynchro</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_SlaveConfigSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_SlaveConfigSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[cf]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 674 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>HAL_UART_MspInit</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_UART_Transmit</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_2_matlab
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HardFault_Handler &rArr; UFCP_RX_IRQ_Handler &rArr; UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_TX_IRQ_Handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>MCI_Clear_Iqdref</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_Clear_Iqdref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_Clear_Iqdref
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[e1]"></a>MCI_EncoderAlign</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_EncoderAlign))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_AlignEncoderMotor1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[e3]"></a>MCI_ExecBufferedCommands</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_ExecBufferedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_ExecBufferedCommands &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[102]"></a>MCI_ExecSpeedRamp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecSpeedRamp))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor1
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecSpeedRamp
</UL>

<P><STRONG><a name="[104]"></a>MCI_ExecTorqueRamp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecTorqueRamp))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramTorqueRampMotor1
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[e4]"></a>MCI_FaultAcknowledged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_FaultAcknowledged))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultAcknowledged
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[e6]"></a>MCI_GetAvrgMecSpeed01Hz</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_GetAvrgMecSpeed01Hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetAvrgMecSpeed01Hz
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeed01Hz
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[145]"></a>MCI_GetControlMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[151]"></a>MCI_GetIab</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIab))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[152]"></a>MCI_GetIalphabeta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIalphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[14f]"></a>MCI_GetIqd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqd))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[14c]"></a>MCI_GetIqdref</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[157]"></a>MCI_GetLastRampFinalSpeed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetLastRampFinalSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e9]"></a>MCI_GetMecSpeedRef01Hz</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetMecSpeedRef01Hz))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRef01Hz
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[eb]"></a>MCI_GetSTMState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetSTMState))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetSTMStateMotor1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[15c]"></a>MCI_GetTeref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetTeref))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[154]"></a>MCI_GetValphabeta</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetValphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[153]"></a>MCI_GetVqd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetVqd))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[125]"></a>MCI_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[15b]"></a>MCI_SetCurrentReferences</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_SetCurrentReferences))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetCurrentReferences
</UL>

<P><STRONG><a name="[160]"></a>MCI_SetIdref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_SetIdref))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[ed]"></a>MCI_StartMotor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_StartMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_StartMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[ee]"></a>MCI_StopMotor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_StopMotor))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[ef]"></a>MCI_StopSpeedRamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_StopSpeedRamp))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_StopSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[13a]"></a>MCM_Clarke</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Clarke))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[f1]"></a>MCM_Park</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mc_math.o(i.MCM_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCM_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[f3]"></a>MCM_Rev_Park</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mc_math.o(i.MCM_Rev_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCM_Rev_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[f2]"></a>MCM_Trig_Functions</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, mc_math.o(i.MCM_Trig_Functions))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
</UL>

<P><STRONG><a name="[f4]"></a>MCP_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, motor_control_protocol.o(i.MCP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_SetClient
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[76]"></a>MCP_OnTimeOut</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_OnTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCP_OnTimeOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[77]"></a>MCP_ReceivedFrame</STRONG> (Thumb, 1638 bytes, Stack size 136 bytes, motor_control_protocol.o(i.MCP_ReceivedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MCP_ReceivedFrame &rArr; UI_GetRevupData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetDAC
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetCurrentReferences
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetMPInfo
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetDAC
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecSpeedRamp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[78]"></a>MCP_SentFrame</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_SentFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCP_SentFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[ff]"></a>MC_AlignEncoderMotor1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_AlignEncoderMotor1))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EncoderAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>MC_GetSTMStateMotor1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_GetSTMStateMotor1))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[101]"></a>MC_ProgramSpeedRampMotor1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_api.o(i.MC_ProgramSpeedRampMotor1))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
</UL>

<P><STRONG><a name="[103]"></a>MC_ProgramTorqueRampMotor1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_api.o(i.MC_ProgramTorqueRampMotor1))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>MC_RunMotorControlTasks</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, mc_tasks.o(i.MC_RunMotorControlTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; ENC_CalcAvrgMecSpeed01Hz &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Scheduler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CheckOverCurrent
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[106]"></a>MC_Scheduler</STRONG> (Thumb, 614 bytes, Stack size 16 bytes, mc_tasks.o(i.MC_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MC_Scheduler &rArr; ENC_CalcAvrgMecSpeed01Hz &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetSpeedSensor
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeed01Hz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SetRestartState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_IsAligned
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetRestartState
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Exec
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_TurnOnLowSides
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_SwitchOnPWM
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[117]"></a>MC_StartMotor1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_StartMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_StartMotor1 &rArr; MCI_StartMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[118]"></a>MC_StopMotor1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_StopMotor1))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_HandleStartStopButton_cb
</UL>

<P><STRONG><a name="[119]"></a>MCboot</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, mc_tasks.o(i.MCboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MCboot &rArr; NTC_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimers
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRef01HzDefault
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[12e]"></a>MPM_CalcElMotorPower</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, motor_power_measurement.o(i.MPM_CalcElMotorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPM_CalcElMotorPower
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
</UL>

<P><STRONG><a name="[10b]"></a>MPM_Clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor_power_measurement.o(i.MPM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MPM_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[14e]"></a>MPM_GetAvrgElMotorPowerW</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_GetAvrgElMotorPowerW))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[127]"></a>MX_MotorControl_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motorcontrol.o(i.MX_MotorControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_MotorControl_Init &rArr; UI_TaskInit &rArr; MCP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_pins
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>NTC_CalcAvTemp</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(i.NTC_CalcAvTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NTC_CalcAvTemp &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[14d]"></a>NTC_GetAvTemp_C</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_GetAvTemp_C))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[123]"></a>NTC_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ntc_temperature_sensor.o(i.NTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NTC_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[14b]"></a>PID_GetKD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKD))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[149]"></a>PID_GetKI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKI))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[14a]"></a>PID_GetKIDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKIDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[147]"></a>PID_GetKP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKP))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[148]"></a>PID_GetKPDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKPDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[11d]"></a>PID_HandleInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_HandleInit))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[a6]"></a>PID_SetIntegralTerm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetIntegralTerm))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[15f]"></a>PID_SetKD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKD))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[15e]"></a>PID_SetKI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKI))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[15d]"></a>PID_SetKP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKP))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[130]"></a>PI_Controller</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, pid_regulator.o(i.PI_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[10e]"></a>PQD_CalcElMotorPower</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pqd_motor_power_measurement.o(i.PQD_CalcElMotorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PQD_CalcElMotorPower &rArr; MPM_CalcElMotorPower
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_CalcElMotorPower
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[108]"></a>PWMC_CheckOverCurrent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_CheckOverCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[112]"></a>PWMC_CurrentReadingCalibr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pwm_curr_fdbk.o(i.PWMC_CurrentReadingCalibr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMC_CurrentReadingCalibr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[139]"></a>PWMC_GetPhaseCurrents</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_GetPhaseCurrents))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[13c]"></a>PWMC_SetPhaseVoltage</STRONG> (Thumb, 414 bytes, Stack size 8 bytes, pwm_curr_fdbk.o(i.PWMC_SetPhaseVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMC_SetPhaseVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[a8]"></a>PWMC_SwitchOffPWM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[135]"></a>R3F4XX_BRK_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_BRK_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>R3F4XX_CurrentReadingCalibration</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_CurrentReadingCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R3F4XX_CurrentReadingCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_SwitchOnPWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>R3F4XX_GetPhaseCurrents</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_GetPhaseCurrents))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R3F4XX_GetPhaseCurrents
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mc_config.o(.data)
<LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_CurrentReadingCalibration)
<LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable)
</UL>
<P><STRONG><a name="[11a]"></a>R3F4XX_Init</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F4XX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[c]"></a>R3F4XX_IsOverCurrentOccurred</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_IsOverCurrentOccurred))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>R3F4XX_RLDetectionModeDisable</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F4XX_RLDetectionModeDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>R3F4XX_RLDetectionModeEnable</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F4XX_RLDetectionModeEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>R3F4XX_RLDetectionModeSetDuty</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeSetDuty))
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>R3F4XX_SetADCSampPointSect1</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F4XX_SetADCSampPointSect1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>R3F4XX_SetADCSampPointSect2</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F4XX_SetADCSampPointSect2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>R3F4XX_SetADCSampPointSect3</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F4XX_SetADCSampPointSect3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>R3F4XX_SetADCSampPointSect4</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F4XX_SetADCSampPointSect4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>R3F4XX_SetADCSampPointSect5</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect5))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F4XX_SetADCSampPointSect5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>R3F4XX_SetADCSampPointSect6</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SetADCSampPointSect6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3F4XX_SetADCSampPointSect6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>R3F4XX_SwitchOffPWM</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> mc_config.o(.data)
<LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable)
<LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[3]"></a>R3F4XX_SwitchOnPWM</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_SwitchOnPWM))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_CurrentReadingCalibration
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable)
</UL>
<P><STRONG><a name="[136]"></a>R3F4XX_TIMx_UP_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_TIMx_UP_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>R3F4XX_TurnOnLowSides</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_TurnOnLowSides))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeDisable)
</UL>
<P><STRONG><a name="[12b]"></a>RCM_ExecRegularConv</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, regular_conversion_manager.o(i.RCM_ExecRegularConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
</UL>

<P><STRONG><a name="[10c]"></a>RCM_ExecUserConv</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, regular_conversion_manager.o(i.RCM_ExecUserConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCM_ExecUserConv &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[12c]"></a>RCM_RegisterRegConv</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, regular_conversion_manager.o(i.RCM_RegisterRegConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
</UL>

<P><STRONG><a name="[124]"></a>REMNG_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ramp_ext_mngr.o(i.REMNG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[150]"></a>RUC_GetNumberOfPhases</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetNumberOfPhases))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[158]"></a>RUC_GetPhaseDurationms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetPhaseDurationms))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[159]"></a>RUC_GetPhaseFinalMecSpeed01Hz</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetPhaseFinalMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[15a]"></a>RUC_GetPhaseFinalTorque</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetPhaseFinalTorque))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[161]"></a>RUC_SetPhaseDurationms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_SetPhaseDurationms))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[162]"></a>RUC_SetPhaseFinalMecSpeed01Hz</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_SetPhaseFinalMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[163]"></a>RUC_SetPhaseFinalTorque</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_SetPhaseFinalTorque))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[109]"></a>RVBS_CalcAvVbus</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_CalcAvVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RVBS_CalcAvVbus &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[122]"></a>RVBS_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RVBS_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[e8]"></a>SPD_GetAvrgMecSpeed01Hz</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetAvrgMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeed01Hz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
</UL>

<P><STRONG><a name="[138]"></a>SPD_GetElAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetElAngle))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[155]"></a>SPD_GetS16Speed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetS16Speed))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[a2]"></a>SPD_IsMecSpeedReliable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, speed_pos_fdbk.o(i.SPD_IsMecSpeedReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeed01Hz
</UL>

<P><STRONG><a name="[115]"></a>STC_CalcTorqueReference</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, speed_torq_ctrl.o(i.STC_CalcTorqueReference))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeed01Hz
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[a7]"></a>STC_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[a0]"></a>STC_ExecRamp</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, speed_torq_ctrl.o(i.STC_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_ExecRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[116]"></a>STC_ForceSpeedReferenceToCurrentSpeed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, speed_torq_ctrl.o(i.STC_ForceSpeedReferenceToCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_ForceSpeedReferenceToCurrentSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeed01Hz
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[e0]"></a>STC_GetDefaultIqdref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetDefaultIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[144]"></a>STC_GetMaxAppPositiveMecSpeed01Hz</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMaxAppPositiveMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[ea]"></a>STC_GetMecSpeedRef01Hz</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRef01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRef01Hz
</UL>

<P><STRONG><a name="[126]"></a>STC_GetMecSpeedRef01HzDefault</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRef01HzDefault))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[156]"></a>STC_GetMinAppNegativeMecSpeed01Hz</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMinAppNegativeMecSpeed01Hz))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e7]"></a>STC_GetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeed01Hz
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[120]"></a>STC_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9f]"></a>STC_SetControlMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[114]"></a>STC_SetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[f0]"></a>STC_StopSpeedRamp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_StopSpeedRamp))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopSpeedRamp
</UL>

<P><STRONG><a name="[e5]"></a>STM_FaultAcknowledged</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, state_machine.o(i.STM_FaultAcknowledged))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
</UL>

<P><STRONG><a name="[10a]"></a>STM_FaultProcessing</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, state_machine.o(i.STM_FaultProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[146]"></a>STM_GetFaultState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state_machine.o(i.STM_GetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[ec]"></a>STM_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, state_machine.o(i.STM_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
</UL>

<P><STRONG><a name="[11c]"></a>STM_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state_machine.o(i.STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[e2]"></a>STM_NextState</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, state_machine.o(i.STM_NextState))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EncoderAlign
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>

<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTick_Handler &rArr; MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; ENC_CalcAvrgMecSpeed01Hz &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>SystemClock_Config</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_EnableCSS
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_mc_it.o(i.TIM2_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; MC_Scheduler &rArr; ENC_CalcAvrgMecSpeed01Hz &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_BRK_IRQHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_mc_it.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_TIMx_UP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d9]"></a>TSK_HardwareFaultTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_HardwareFaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSK_HardwareFaultTask
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[97]"></a>TSK_HighFrequencyTask</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, mc_tasks.o(i.TSK_HighFrequencyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSK_HighFrequencyTask &rArr; MCM_Park
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetPhaseVoltage
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_GetPhaseCurrents
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Clarke
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAngle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Limitation
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>UFCP_AbortReceive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_AbortReceive))
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[13f]"></a>UFCP_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_Init))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[da]"></a>UFCP_OVR_IRQ_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_OVR_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UFCP_OVR_IRQ_Handler &rArr; UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[dd]"></a>UFCP_RX_IRQ_Handler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, usart_frame_communication_protocol.o(i.UFCP_RX_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UFCP_RX_IRQ_Handler &rArr; UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[7f]"></a>UFCP_Receive</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_Receive))
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[80]"></a>UFCP_Send</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[dc]"></a>UFCP_TX_IRQ_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_TX_IRQ_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[143]"></a>UI_DACExec</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_interface.o(i.UI_DACExec))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACUpdate
</UL>

<P><STRONG><a name="[165]"></a>UI_DACInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_interface.o(i.UI_DACInit))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[98]"></a>UI_DACUpdate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ui_task.o(i.UI_DACUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UI_DACUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetSelectedMC
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACExec
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>UI_ExecCmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, user_interface.o(i.UI_ExecCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UI_ExecCmd &rArr; MCI_Clear_Iqdref
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EncoderAlign
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopSpeedRamp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[fa]"></a>UI_ExecSpeedRamp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user_interface.o(i.UI_ExecSpeedRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_ExecSpeedRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[f8]"></a>UI_GetDAC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, user_interface.o(i.UI_GetDAC))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[fe]"></a>UI_GetMPInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_interface.o(i.UI_GetMPInfo))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[99]"></a>UI_GetReg</STRONG> (Thumb, 792 bytes, Stack size 24 bytes, user_interface.o(i.UI_GetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UI_GetReg &rArr; MCI_GetAvrgMecSpeed01Hz
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetControlMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeed01Hz
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetFaultState
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMinAppNegativeMecSpeed01Hz
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMaxAppPositiveMecSpeed01Hz
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetS16Speed
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetNumberOfPhases
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKPDivisor
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKP
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisor
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKI
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKD
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_GetAvTemp_C
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_GetAvrgElMotorPowerW
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetVqd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetValphabeta
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRef01Hz
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalSpeed
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIalphabeta
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIab
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Exec
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[fb]"></a>UI_GetRevupData</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, user_interface.o(i.UI_GetRevupData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UI_GetRevupData
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseFinalTorque
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseFinalMecSpeed01Hz
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseDurationms
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[142]"></a>UI_GetSelectedMC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_interface.o(i.UI_GetSelectedMC))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACUpdate
</UL>

<P><STRONG><a name="[a3]"></a>UI_HandleStartStopButton_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ui_task.o(i.UI_HandleStartStopButton_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UI_HandleStartStopButton_cb &rArr; MC_StartMotor1 &rArr; MCI_StartMotor
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetSTMStateMotor1
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>UI_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, user_interface.o(i.UI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[10d]"></a>UI_Scheduler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ui_task.o(i.UI_Scheduler))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[de]"></a>UI_SerialCommunicationTimeOutStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStart))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[db]"></a>UI_SerialCommunicationTimeOutStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStop))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[fd]"></a>UI_SetCurrentReferences</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, user_interface.o(i.UI_SetCurrentReferences))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[f7]"></a>UI_SetDAC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_interface.o(i.UI_SetDAC))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[f6]"></a>UI_SetReg</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, user_interface.o(i.UI_SetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UI_SetReg
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKP
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKI
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKD
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetIdref
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetTeref
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRef01Hz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[fc]"></a>UI_SetRevupData</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, user_interface.o(i.UI_SetRevupData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UI_SetRevupData
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseFinalTorque
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseFinalMecSpeed01Hz
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseDurationms
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[12a]"></a>UI_TaskInit</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, ui_task.o(i.UI_TaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UI_TaskInit &rArr; MCP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DACInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetDAC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_mc_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART1_IRQHandler &rArr; UFCP_RX_IRQ_Handler &rArr; UFCP_Send &rArr; FCP_CalcCRC
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStart
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_TX_IRQ_Handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f417xx.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>VBS_GetAvBusVoltage_V</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_voltage_sensor.o(i.VBS_GetAvBusVoltage_V))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[121]"></a>VSS_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[9d]"></a>VSS_SetMecAcceleration</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, virtual_speed_sensor.o(i.VSS_SetMecAcceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[9e]"></a>VSS_SetMecAngle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_SetMecAngle))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[166]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[170]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
</UL>

<P><STRONG><a name="[18f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[190]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[191]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[192]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[193]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[16d]"></a>back_to_middle</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, main.o(i.back_to_middle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = back_to_middle &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor1
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[171]"></a>function_tf</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, main.o(i.function_tf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = function_tf &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>main</STRONG> (Thumb, 1300 bytes, Stack size 104 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramTorqueRampMotor1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetSTMStateMotor1
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_AlignEncoderMotor1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_2_matlab
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_tf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_to_middle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[129]"></a>mc_lock_pins</STRONG> (Thumb, 272 bytes, Stack size 12 bytes, mc_tasks.o(i.mc_lock_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mc_lock_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[17a]"></a>send_data_2_matlab</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, main.o(i.send_data_2_matlab))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_data_2_matlab &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>startTimers</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, pwm_common.o(i.startTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = startTimers
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a5]"></a>FOC_Clear</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mc_tasks.o(i.FOC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FOC_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[ce]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_SlaveTimer_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
</UL>

<P><STRONG><a name="[75]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[d6]"></a>UART_SetConfig</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d8]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[12f]"></a>LL_TIM_OC_SetMode</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.LL_TIM_OC_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_RLDetectionModeEnable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3F4XX_RLDetectionModeDisable
</UL>

<P><STRONG><a name="[79]"></a>R3F4XX_HFCurrentsCalibrationAB</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_HFCurrentsCalibrationAB))
<BR>[Address Reference Count : 1]<UL><LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[7a]"></a>R3F4XX_HFCurrentsCalibrationC</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_HFCurrentsCalibrationC))
<BR>[Address Reference Count : 1]<UL><LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[7b]"></a>R3F4XX_RLGetPhaseCurrents</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLGetPhaseCurrents))
<BR>[Address Reference Count : 1]<UL><LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[7d]"></a>R3F4XX_RLSwitchOnPWM</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLSwitchOnPWM))
<BR>[Address Reference Count : 1]<UL><LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[7c]"></a>R3F4XX_RLTurnOnLowSides</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLTurnOnLowSides))
<BR>[Address Reference Count : 1]<UL><LI> r3_f4xx_pwm_curr_fdbk.o(i.R3F4XX_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[168]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[167]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[16b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
